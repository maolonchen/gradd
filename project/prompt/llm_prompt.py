def LLM_POST_SIMILAR_PROMPT(ori_data, similar_data):
    return (
        f'你是一个数据判别专家。需要对"原始数据":{{{ori_data}}}和"经过相似度比较后的数据"：{{{similar_data}}}进行判断。\n'
        '判断逻辑和要求：\n'
        '1.第一步：先获取"原始数据"最右侧的数据，如："[C1, C1-2]"中的"C1-2"，到"经过相似度比较后的数据"中的字母数字进行匹配，如"经过相似度比较后的数据"：[{"C1-2 服务记录和日志", "第3级"}, {"C1-5 违规记录数据", "第1级"}, {"B1-1 服务内容数据", "第3级"}, {"D1-1 用户使用习惯和行为分析数据", "第3级"}]中的"C1-2"，则匹配成功，获取到对应的等级\n'
        '2.第二步：如果"原始数据"最右侧的数据在"经过相似度比较后的数据"没有匹配到，则获取左侧一位的数据如：C1 到"经过相似度比较后的数据"中匹配，如果C1也没有匹配上，则继续往临近左侧获取数据（如果有）进行匹配，拿到对应的等级。\n'
        '3.第三步：必须遍历匹配每一条数据，因为"经过相似度比较后的数据"匹配的结果可能包含多条，原因是匹配的字母和数字是相同的如G6-9，但是如"G6-9 招标数据（XXX）"和"G6-9 招标数据（YYY）"中包含括号，括号内是条件，括号内的内容作为条件获取到。\n'
        '输出结果具体形式：\n'
        '- 输出结果不是"经过相似度比较后的数据"中匹配到的字段，而是该字段对应的等级，例如匹配到{"C1-2 服务记录和日志", "第3级"}中的C1-2，则返回第3级。\n'
        '- 情况1：这种情况下"条件"为空！匹配到的字段中没有括号，则输出：[{"等级":"第m级", "条件":""}]。\n'
        '- 情况2：若匹配"经过相似度比较后的数据"的字段中带有括号（），说明该字段是相同的，但是带有"条件"，而对应的等级也不同，如：["L2 系统（XXX）", "第m级"]和["L2 系统（YYY）", "第n级"]，则输出：[{"等级":"第m级/第n级", "条件":"XXX/YYY"}]\n' 
        '注意：\n'
        '只能写成：[{"等级":"第m级/第n级", "条件":"XXX/YYY"}]，list的长度为1。'
        '返回输出格式：纯JSON对象数组，不包含额外说明。'
    )
    
def FEATURE_ENTITY_PROMPT(feature_data):
    return (
        f'''请从以下文本中提取所有**具体且可独立管理的数据单元名称**。

    核心原则：
    - 必须避免提取孤立的泛化词（如“类型”“数据”“信息”“内容”）
    - 如果多个并列项共享一个前缀（如“采购物资数量、类型”），必须将前缀补全到每一项，形成完整字段名

    具体规则：
    1. **识别并列结构**：
    - 找到由“、”“，”“和”“与”分隔的多个项
    - 特别注意：如果第一项包含一个明确的前缀（如“采购物资”），后续项是单个词（如“数量”“类型”），则后续项应继承该前缀

    2. **执行前缀补全**：
    - 示例：
        - “采购物资数量、类型” → 补全为：采购物资数量、采购物资类型
        - “用户登录时间、IP、设备” → 补全为：用户登录时间、用户登录IP、用户登录设备
    - 补全后的字段必须是原文语义的合理延伸

    3. **处理括号与缩写**：
    - “缩写（中文）” → 提取缩写（如 DDM）
    - “分类（A、B）” → 提取 A、B

    4. **过滤泛化词**：
    - 禁止输出：类型、数据、信息、内容、相关、等、方面、过程、服务、功能
    - 即使原文有，也不得单独输出
    - 除非它是复合词的一部分（如“物资类型”可，但“类型”不可）

    5. **标点与引导词**：
    - “包括A、B” → 提取 A、B
    - “A：X、Y” → 提取 X、Y

    输出要求：
    - 仅返回涉及到的n个字段名，严禁字段是一段话！
    - 格式：["字段1", "字段2", "字段3", "字段4", ...]
    - 输出格式：纯JSON对象数组，不包含额外说明

    文本："{feature_data}"
    '''
    )
    
def CONTENT_TO_GRAD_PROMPT(post_data):
    """构造模型提示"""
    return (
        '你是数据识别和处理专家。请根据输入的数据进行处理：\n'
        '要求：\n'
        '1.判断输入的数据中是否有分类的等级信息（分类的等级特征一般由类别即字母和类别等级数字和"-"组成，例如："""T8-4 太空信息：飞船数据、人体数据"""，注意T8-4只是案例，实际可能会有多级（即多个"-"）\n'
        '2.如果有返回1和等级信息（格式：等级 空格 后面的文字简短总结），没有则返回0\n'
        '3.如果有多个分类，请用分号";"分隔每个分类\n'
        '4.返回格式是严格的纯json，不要有其他任何说明\n'
        '5.注意json的花括号，不是圆括号!\n'
        '6.单引号要统一\n'
        '案例如下：\n'
        '{"1":"T8-4 太空数据"}'
        '或\n'
        '{"1":"T8-4 太空数据; T8-5 地面数据; T8-6 海洋数据"}'
        '或\n'
        '{"0":""}'
        '以下是实际输入：\n'
        f'{{{post_data}}}'
    )